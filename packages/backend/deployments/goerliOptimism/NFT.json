{
  "address": "0xB9583709FA5B13D30a1A3DBcb0a45D6610113D11",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Donation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueClaimed",
          "type": "uint256"
        }
      ],
      "name": "DonationClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "FollowMePut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimToOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        }
      ],
      "name": "claimToRef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "refs",
          "type": "uint256[]"
        }
      ],
      "name": "createToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getReferences",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasuryBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "setFollowMe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenDonationBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenTotalDonated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc850df57b268878b71a769ef5cc15914a983ac98b8b10d32878263709a91a4a",
  "receipt": {
    "to": null,
    "from": "0x7a3D330d71D32D3b2261dAe4f4c4c48E26edd32C",
    "contractAddress": "0xB9583709FA5B13D30a1A3DBcb0a45D6610113D11",
    "transactionIndex": 0,
    "gasUsed": "3860256",
    "logsBloom": "0x
    "blockHash": "0x98842a615b7edd101cf16d1d7c0bffc70308700a8a19729b226d89455990965a",
    "transactionHash": "0xfc850df57b268878b71a769ef5cc15914a983ac98b8b10d32878263709a91a4a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2907709,
        "transactionHash": "0xfc850df57b268878b71a769ef5cc15914a983ac98b8b10d32878263709a91a4a",
        "address": "0xB9583709FA5B13D30a1A3DBcb0a45D6610113D11",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007a3d330d71d32d3b2261dae4f4c4c48e26edd32c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x98842a615b7edd101cf16d1d7c0bffc70308700a8a19729b226d89455990965a"
      }
    ],
    "blockNumber": 2907709,
    "cumulativeGasUsed": "3860256",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "30735ea5db7cb15daa4ef3685d684146",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueClaimed\",\"type\":\"uint256\"}],\"name\":\"DonationClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"FollowMePut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"}],\"name\":\"claimToRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"refs\",\"type\":\"uint256[]\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getReferences\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasuryBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"setFollowMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenDonationBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenTotalDonated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"claimToOwner(uint256)\":{\"details\":\"sender pulls a fee _ and sends claimable value to address of the owner of _tokenId_: callable by any address\",\"params\":{\"tokenId\":\"id of the token having its donation pulled \"}},\"claimToRef(uint256,uint256)\":{\"details\":\"sender pulls a fee _ and sends claimable part of the donation balance to a reference NFT: callable by any address\",\"params\":{\"from\":\"id of the NFT having its donation balance claimed\",\"to\":\"id of the reference NFT receiving the donation balance\"}},\"claimable(uint256,uint256)\":{\"details\":\"owner of the token that received the donation has a claim to 2/3_ _references split the remaining 1/3\",\"params\":{\"from\":\"tokenId that received the donation\",\"to\":\"tokenId that has a claim over part of the donation received by _from_\"},\"returns\":{\"_0\":\"_ value that _to_ can receive for that particular token (_from_)\"}},\"donate(uint256)\":{\"details\":\"receives payment as donation updated _totalDonated[tokenId] if there is a _followMe set for _tokenId_ uses this entry as tokenId \"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setFollowMe(uint256,uint256)\":{\"details\":\"updates followMe mapping \",\"params\":{\"from\":\"the id of the old NFT\",\"to\":\"the id of the new updated NFT \"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_balanceClaimed\":{\"details\":\"total value ever claimed to _tokenTo_ from _tokenFrom_'s donations maps _(beneficiary, claimee)_ to _value_ _beneficiary_ is the token claiming part of the donation _claimee_ is the token that received the donation and is having its balance claimed\"},\"_followMe\":{\"details\":\"donations to _from_ are automatically sent to _to_ this mapping allows new tokens to be minted with updated references donations sent to old token are still received by the new one with the right split\"},\"_references\":{\"details\":\"list of references created for _tokenId_ list cannot be updated if references must be changed new token should be minted maps _tokenId_ to _reference list_\"},\"_totalClaimed\":{\"details\":\"total value ever claimed from _tokenId_'s donations maps _tokenId_ to _value_\"},\"_totalDonated\":{\"details\":\"total value ever donated to tokenId maps _tokenId_ to _value_\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimable(uint256,uint256)\":{\"notice\":\"gets the value that can be claimed for a pair (to, from)\"},\"setFollowMe(uint256,uint256)\":{\"notice\":\"should be used when a onwer wants to update _ the reference list, in which case a new NFT should be minted _ followMe guarantees that any donation sent to the old NFT will be _ sent to the new one and split between the new list of references\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT.sol\":\"NFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\ncontract NFT is ERC721URIStorage, ReentrancyGuard, Ownable {\\r\\n  using Counters for Counters.Counter;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  Counters.Counter private _tokenIds;\\r\\n\\r\\n/**\\r\\n * @dev total value ever donated to tokenId\\r\\n * maps _tokenId_ to _value_\\r\\n */\\r\\n  mapping( uint256 => uint256 ) private _totalDonated;\\r\\n\\r\\n/**\\r\\n  * @dev total value ever claimed from _tokenId_'s donations\\r\\n  * maps _tokenId_ to _value_\\r\\n  */\\r\\n  mapping(uint256 => uint256) private _totalClaimed;\\r\\n\\r\\n/**\\r\\n * @dev total value ever claimed to _tokenTo_ from _tokenFrom_'s donations\\r\\n * maps _(beneficiary, claimee)_ to _value_\\r\\n * _beneficiary_ is the token claiming part of the donation\\r\\n * _claimee_ is the token that received the donation and is having its balance claimed\\r\\n */\\r\\n  mapping(\\r\\n    uint256 => mapping(uint256 => uint256 ) \\r\\n  ) private _balanceClaimed;\\r\\n  \\r\\n/**\\r\\n * @dev list of references created for _tokenId_\\r\\n * list cannot be updated if references must be changed new token should be minted\\r\\n * maps _tokenId_ to _reference list_\\r\\n */\\r\\n  mapping(uint256 => uint256[]) private _references;\\r\\n\\r\\n/**\\r\\n * maps _from_ to _to_\\r\\n * @dev donations to _from_ are automatically sent to _to_\\r\\n * this mapping allows new tokens to be minted with updated references\\r\\n * donations sent to old token are still received by the new one with the right split\\r\\n */\\r\\n  mapping(uint256 => uint256 ) private _followMe;\\r\\n\\r\\n  uint private _treasuryBalance;\\r\\n\\r\\n  event Donation (address indexed donor, uint256 indexed tokenId, uint256 value);\\r\\n\\r\\n  event DonationClaimed (uint256 indexed to, uint256 indexed from, uint256 valueClaimed);\\r\\n\\r\\n  event FollowMePut (uint256 indexed from, uint256 indexed to);\\r\\n    \\r\\n  \\r\\n  constructor() ERC721(\\\"SciGraph\\\", \\\"SCGP\\\") {}\\r\\n\\r\\n  function tokenTotalDonated(uint256 tokenId) public view returns (uint256){\\r\\n    return _totalDonated[tokenId];\\r\\n  }\\r\\n  \\r\\n  function tokenDonationBalance (uint256 tokenId) public view returns (uint256) {\\r\\n    return _totalDonated[tokenId] - _totalClaimed[tokenId];\\r\\n  }\\r\\n\\r\\n\\r\\n  function numberOfTokens () public view returns (uint256) {\\r\\n    return _tokenIds.current();\\r\\n  }\\r\\n\\r\\n    function getTreasuryBalance() public view returns (uint256) {\\r\\n    return _treasuryBalance;\\r\\n  }\\r\\n \\r\\n  function getReferences (uint256 tokenId) public view returns(uint256[] memory) {\\r\\n    require(tokenId >= 0 && tokenId < _tokenIds.current(), \\\"_getReferences : enter a valid token Id\\\");\\r\\n    return _references[tokenId];\\r\\n  }\\r\\n\\r\\n  function createToken (string memory tokenURI, uint256[] memory refs) public returns(uint256) {\\r\\n    uint256 newTokenId = _tokenIds.current();\\r\\n    _tokenIds.increment();\\r\\n    _mint(msg.sender, newTokenId);\\r\\n    _setTokenURI(newTokenId, tokenURI);\\r\\n    _createReferences(newTokenId, refs);\\r\\n    return newTokenId;\\r\\n  }\\r\\n\\r\\n/**\\r\\n * @dev receives payment as donation updated _totalDonated[tokenId]\\r\\n * if there is a _followMe set for _tokenId_ uses this entry as tokenId\\r\\n * \\r\\n */\\r\\n  function donate (uint256 tokenId) public payable nonReentrant {\\r\\n    \\r\\n    require(tokenId < _tokenIds.current(), \\\"Token does not exist.\\\");\\r\\n    uint256 _tax = msg.value / 100; // 1% treasury fee\\r\\n    \\r\\n    if (_followMe[tokenId] != 0) {\\r\\n      tokenId = _followMe[tokenId];\\r\\n    }\\r\\n\\r\\n    _totalDonated[tokenId] = _totalDonated[tokenId].add(msg.value -_tax);\\r\\n    emit Donation (msg.sender, tokenId, msg.value - _tax);\\r\\n    _treasuryBalance += _tax;\\r\\n\\r\\n  }\\r\\n\\r\\n  function _createReferences (uint256 tokenId, uint256[] memory refs) private { \\r\\n    uint i;\\r\\n    for (i=0 ; i < refs.length ; i++){\\r\\n      require( refs[i] < _tokenIds.current() , \\\"_createReferences: Invalid tokenId in Reference entries\\\" );\\r\\n    } \\r\\n    \\r\\n    _references[tokenId] = refs;\\r\\n\\r\\n  }\\r\\n\\r\\n/**\\r\\n * @notice gets the value that can be claimed for a pair (to, from)\\r\\n * @dev owner of the token that received the donation has a claim to 2/3_\\r\\n * _references split the remaining 1/3\\r\\n * @param from tokenId that received the donation\\r\\n * @param to tokenId that has a claim over part of the donation received by _from_\\r\\n * @return _ value that _to_ can receive for that particular token (_from_)\\r\\n */\\r\\n  \\r\\n  function claimable (uint256 to, uint256 from) public view returns (uint256) {\\r\\n    if(_references[from].length > 0){\\r\\n\\r\\n      if(to == from){\\r\\n        return ( _totalDonated[to] * 2) / 3  - _balanceClaimed[to][to];\\r\\n      }\\r\\n\\r\\n      return ( _totalDonated[from] / 3) / _references[from].length - _balanceClaimed[to][from];\\r\\n    }\\r\\n\\r\\n    if(to == from){\\r\\n      return tokenDonationBalance(from);\\r\\n    }\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev sender pulls a fee _\\r\\n * and sends claimable value to address of the owner of _tokenId_: callable by any address\\r\\n * @param tokenId id of the token having its donation pulled\\r\\n * \\r\\n */\\r\\n\\r\\n  function claimToOwner (uint256 tokenId ) public nonReentrant {\\r\\n    \\r\\n    uint256 valueClaimed = claimable(tokenId, tokenId);\\r\\n    require(\\r\\n      valueClaimed > 0, \\\"There are no funds to be claimed for the owner\\\" \\r\\n    );\\r\\n    \\r\\n    uint256 claimer_cut = ( valueClaimed ) / 100; // 1% claim fee\\r\\n    emit DonationClaimed(tokenId, tokenId, valueClaimed);\\r\\n    _totalClaimed[tokenId] += valueClaimed;\\r\\n    _balanceClaimed[tokenId][tokenId] += valueClaimed;\\r\\n\\r\\n    address payable beneficiary = payable( ownerOf(tokenId) );\\r\\n\\r\\n    (bool success, ) = beneficiary.call{value: valueClaimed - claimer_cut}(\\\"\\\");\\r\\n    require(success, \\\"Transfer of owner's funds failed\\\");\\r\\n    \\r\\n    (bool success_, ) = payable(msg.sender).call{value: claimer_cut}(\\\"\\\");\\r\\n    require(success_ , \\\"Transfer of claimer's funds failed\\\");\\r\\n  }\\r\\n\\r\\n/**\\r\\n * \\r\\n * @dev sender pulls a fee _\\r\\n * and sends claimable part of the donation balance to a reference NFT: callable by any address\\r\\n * @param to id of the reference NFT receiving the donation balance\\r\\n * @param from id of the NFT having its donation balance claimed\\r\\n */\\r\\n  function claimToRef (uint256 to, uint256 from) public nonReentrant {\\r\\n\\r\\n    uint256 valueClaimed = claimable(to, from);\\r\\n    require( \\r\\n      valueClaimed > 0, \\\"There are no funds to be claimed to this reference\\\"\\r\\n    );\\r\\n\\r\\n    uint256 claimer_cut = valueClaimed / 100;\\r\\n    emit DonationClaimed(to, from, valueClaimed);\\r\\n    _totalClaimed[from] += valueClaimed;\\r\\n    _balanceClaimed[to][from] += valueClaimed;\\r\\n\\r\\n    _totalDonated[to] += (valueClaimed - claimer_cut);\\r\\n\\r\\n    (bool success_, ) = payable(msg.sender).call{value: claimer_cut}(\\\"\\\");\\r\\n    require(success_ , \\\"Transfer of claimer's funds failed\\\");\\r\\n\\r\\n  }\\r\\n  \\r\\n/**\\r\\n * @notice should be used when a onwer wants to update _\\r\\n * the reference list, in which case a new NFT should be minted _\\r\\n * followMe guarantees that any donation sent to the old NFT will be _\\r\\n * sent to the new one and split between the new list of references\\r\\n * @dev updates followMe mapping \\r\\n * @param from the id of the old NFT\\r\\n * @param to the id of the new updated NFT \\r\\n */\\r\\n  function setFollowMe (uint256 from, uint256 to) public {\\r\\n    require(msg.sender == _ownerOf(from), 'only owner of the token can set a follow me ');\\r\\n    _followMe[from] = to;\\r\\n  }\\r\\n\\r\\n  // withdraw treasure?\\r\\n\\r\\n}\",\"keccak256\":\"0xf379dcf4b3177180caab7a007e9b20e903639de28875bf360604756ec9618040\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600881526020017f53636947726170680000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f5343475000000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620001ae565b508060019080519060200190620000af929190620001ae565b5050506001600781905550620000da620000ce620000e060201b60201c565b620000e860201b60201c565b620002c3565b600033905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001bc906200028d565b90600052602060002090601f016020900481019282620001e057600085556200022c565b82601f10620001fb57805160ff19168380011785556200022c565b828001600101855582156200022c579182015b828111156200022b5782518255916020019190600101906200020e565b5b5090506200023b91906200023f565b5090565b5b808211156200025a57600081600090555060010162000240565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002a657607f821691505b60208210811415620002bd57620002bc6200025e565b5b50919050565b61435e80620002d36000396000f3fe60806040526004361061019c5760003560e01c80638da5cb5b116100ec578063c87b56dd1161008a578063f14faf6f11610064578063f14faf6f1461060e578063f2fde38b1461062a578063f3a99c0814610653578063f9f16ef2146106905761019c565b8063c87b56dd14610557578063e985e9c514610594578063eaf684cf146105d15761019c565b80639d5f08f1116100c65780639d5f08f11461049f578063a22cb465146104dc578063af51694b14610505578063b88d4fde1461052e5761019c565b80638da5cb5b1461041e57806395d89b41146104495780639b5655dc146104745761019c565b80633cfc7ae2116101595780635e287945116101335780635e287945146103645780636352211e1461038d57806370a08231146103ca578063715018a6146104075761019c565b80633cfc7ae2146102d5578063413669f01461031257806342842e0e1461033b5761019c565b806301ffc9a7146101a157806306fdde03146101de578063081812fc14610209578063095ea7b31461024657806323b872dd1461026f5780632640fc3e14610298575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c39190612b0d565b6106bb565b6040516101d59190612b55565b60405180910390f35b3480156101ea57600080fd5b506101f361079d565b6040516102009190612c09565b60405180910390f35b34801561021557600080fd5b50610230600480360381019061022b9190612c61565b61082f565b60405161023d9190612ccf565b60405180910390f35b34801561025257600080fd5b5061026d60048036038101906102689190612d16565b610875565b005b34801561027b57600080fd5b5061029660048036038101906102919190612d56565b61098d565b005b3480156102a457600080fd5b506102bf60048036038101906102ba9190612da9565b6109ed565b6040516102cc9190612df8565b60405180910390f35b3480156102e157600080fd5b506102fc60048036038101906102f79190612c61565b610b11565b6040516103099190612ed1565b60405180910390f35b34801561031e57600080fd5b5061033960048036038101906103349190612da9565b610bd4565b005b34801561034757600080fd5b50610362600480360381019061035d9190612d56565b610dcc565b005b34801561037057600080fd5b5061038b60048036038101906103869190612da9565b610dec565b005b34801561039957600080fd5b506103b460048036038101906103af9190612c61565b610e7e565b6040516103c19190612ccf565b60405180910390f35b3480156103d657600080fd5b506103f160048036038101906103ec9190612ef3565b610f05565b6040516103fe9190612df8565b60405180910390f35b34801561041357600080fd5b5061041c610fbd565b005b34801561042a57600080fd5b50610433610fd1565b6040516104409190612ccf565b60405180910390f35b34801561045557600080fd5b5061045e610ffb565b60405161046b9190612c09565b60405180910390f35b34801561048057600080fd5b5061048961108d565b6040516104969190612df8565b60405180910390f35b3480156104ab57600080fd5b506104c660048036038101906104c19190612c61565b611097565b6040516104d39190612df8565b60405180910390f35b3480156104e857600080fd5b5061050360048036038101906104fe9190612f4c565b6110d2565b005b34801561051157600080fd5b5061052c60048036038101906105279190612c61565b6110e8565b005b34801561053a57600080fd5b50610555600480360381019061055091906130c1565b611370565b005b34801561056357600080fd5b5061057e60048036038101906105799190612c61565b6113d2565b60405161058b9190612c09565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b69190613144565b6114e5565b6040516105c89190612b55565b60405180910390f35b3480156105dd57600080fd5b506105f860048036038101906105f391906132ed565b611579565b6040516106059190612df8565b60405180910390f35b61062860048036038101906106239190612c61565b6115ba565b005b34801561063657600080fd5b50610651600480360381019061064c9190612ef3565b611717565b005b34801561065f57600080fd5b5061067a60048036038101906106759190612c61565b61179b565b6040516106879190612df8565b60405180910390f35b34801561069c57600080fd5b506106a56117b8565b6040516106b29190612df8565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061078657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107965750610795826117c9565b5b9050919050565b6060600080546107ac90613394565b80601f01602080910402602001604051908101604052809291908181526020018280546107d890613394565b80156108255780601f106107fa57610100808354040283529160200191610825565b820191906000526020600020905b81548152906001019060200180831161080857829003601f168201915b5050505050905090565b600061083a82611833565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061088082610e7e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e890613438565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661091061187e565b73ffffffffffffffffffffffffffffffffffffffff16148061093f575061093e8161093961187e565b6114e5565b5b61097e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610975906134ca565b60405180910390fd5b6109888383611886565b505050565b61099e61099861187e565b8261193f565b6109dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d49061355c565b60405180910390fd5b6109e88383836119d4565b505050565b600080600d6000848152602001908152602001600020805490501115610aee5781831415610a7757600c600084815260200190815260200160002060008481526020019081526020016000205460036002600a600087815260200190815260200160002054610a5c91906135ab565b610a669190613634565b610a709190613665565b9050610b0b565b600c6000848152602001908152602001600020600083815260200190815260200160002054600d6000848152602001908152602001600020805490506003600a600086815260200190815260200160002054610ad39190613634565b610add9190613634565b610ae79190613665565b9050610b0b565b81831415610b0657610aff82611097565b9050610b0b565b600090505b92915050565b606060008210158015610b2c5750610b296009611cce565b82105b610b6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b629061370b565b60405180910390fd5b600d6000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610bc857602002820191906000526020600020905b815481526020019060010190808311610bb4575b50505050509050919050565b610bdc611cdc565b6000610be883836109ed565b905060008111610c2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c249061379d565b60405180910390fd5b6000606482610c3c9190613634565b905082847fa7116c38c2fc13dbd2d57ce586bb24784466a4b1f54b8f2676b220044a26f55d84604051610c6f9190612df8565b60405180910390a381600b60008581526020019081526020016000206000828254610c9a91906137bd565b9250508190555081600c600086815260200190815260200160002060008581526020019081526020016000206000828254610cd591906137bd565b925050819055508082610ce89190613665565b600a60008681526020019081526020016000206000828254610d0a91906137bd565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610d3790613844565b60006040518083038185875af1925050503d8060008114610d74576040519150601f19603f3d011682016040523d82523d6000602084013e610d79565b606091505b5050905080610dbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db4906138cb565b60405180910390fd5b505050610dc8611d2c565b5050565b610de783838360405180602001604052806000815250611370565b505050565b610df582611d36565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e599061395d565b60405180910390fd5b80600e6000848152602001908152602001600020819055505050565b600080610e8a83611d36565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef3906139c9565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6d90613a5b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610fc5611d73565b610fcf6000611df1565b565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461100a90613394565b80601f016020809104026020016040519081016040528092919081815260200182805461103690613394565b80156110835780601f1061105857610100808354040283529160200191611083565b820191906000526020600020905b81548152906001019060200180831161106657829003601f168201915b5050505050905090565b6000600f54905090565b6000600b600083815260200190815260200160002054600a6000848152602001908152602001600020546110cb9190613665565b9050919050565b6110e46110dd61187e565b8383611eb7565b5050565b6110f0611cdc565b60006110fc82836109ed565b905060008111611141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113890613aed565b60405180910390fd5b60006064826111509190613634565b905082837fa7116c38c2fc13dbd2d57ce586bb24784466a4b1f54b8f2676b220044a26f55d846040516111839190612df8565b60405180910390a381600b600085815260200190815260200160002060008282546111ae91906137bd565b9250508190555081600c6000858152602001908152602001600020600085815260200190815260200160002060008282546111e991906137bd565b9250508190555060006111fb84610e7e565b905060008173ffffffffffffffffffffffffffffffffffffffff1683856112229190613665565b60405161122e90613844565b60006040518083038185875af1925050503d806000811461126b576040519150601f19603f3d011682016040523d82523d6000602084013e611270565b606091505b50509050806112b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ab90613b59565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16846040516112da90613844565b60006040518083038185875af1925050503d8060008114611317576040519150601f19603f3d011682016040523d82523d6000602084013e61131c565b606091505b5050905080611360576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611357906138cb565b60405180910390fd5b505050505061136d611d2c565b50565b61138161137b61187e565b8361193f565b6113c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b79061355c565b60405180910390fd5b6113cc84848484612024565b50505050565b60606113dd82611833565b60006006600084815260200190815260200160002080546113fd90613394565b80601f016020809104026020016040519081016040528092919081815260200182805461142990613394565b80156114765780601f1061144b57610100808354040283529160200191611476565b820191906000526020600020905b81548152906001019060200180831161145957829003601f168201915b505050505090506000611487612080565b905060008151141561149d5781925050506114e0565b6000825111156114d25780826040516020016114ba929190613bb5565b604051602081830303815290604052925050506114e0565b6114db84612097565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806115866009611cce565b905061159260096120ff565b61159c3382612115565b6115a68185612333565b6115b081846123a7565b8091505092915050565b6115c2611cdc565b6115cc6009611cce565b811061160d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160490613c25565b60405180910390fd5b600060643461161c9190613634565b90506000600e6000848152602001908152602001600020541461165057600e60008381526020019081526020016000205491505b611681813461165f9190613665565b600a60008581526020019081526020016000205461245890919063ffffffff16565b600a600084815260200190815260200160002081905550813373ffffffffffffffffffffffffffffffffffffffff167f106aac375bbcf013d1e52338bbf9e740009a1a3a6869f8daa1b72aa1620f5fec83346116dd9190613665565b6040516116ea9190612df8565b60405180910390a380600f600082825461170491906137bd565b9250508190555050611714611d2c565b50565b61171f611d73565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561178f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178690613cb7565b60405180910390fd5b61179881611df1565b50565b6000600a6000838152602001908152602001600020549050919050565b60006117c46009611cce565b905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61183c8161246e565b61187b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611872906139c9565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166118f983610e7e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061194b83610e7e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061198d575061198c81856114e5565b5b806119cb57508373ffffffffffffffffffffffffffffffffffffffff166119b38461082f565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166119f482610e7e565b73ffffffffffffffffffffffffffffffffffffffff1614611a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4190613d49565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab190613ddb565b60405180910390fd5b611ac783838360016124af565b8273ffffffffffffffffffffffffffffffffffffffff16611ae782610e7e565b73ffffffffffffffffffffffffffffffffffffffff1614611b3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3490613d49565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611cc983838360016125d5565b505050565b600081600001549050919050565b60026007541415611d22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1990613e47565b60405180910390fd5b6002600781905550565b6001600781905550565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611d7b61187e565b73ffffffffffffffffffffffffffffffffffffffff16611d99610fd1565b73ffffffffffffffffffffffffffffffffffffffff1614611def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de690613eb3565b60405180910390fd5b565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1d90613f1f565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516120179190612b55565b60405180910390a3505050565b61202f8484846119d4565b61203b848484846125db565b61207a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207190613fb1565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606120a282611833565b60006120ac612080565b905060008151116120cc57604051806020016040528060008152506120f7565b806120d684612763565b6040516020016120e7929190613bb5565b6040516020818303038152906040525b915050919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217c9061401d565b60405180910390fd5b61218e8161246e565b156121ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c590614089565b60405180910390fd5b6121dc6000838360016124af565b6121e58161246e565b15612225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221c90614089565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461232f6000838360016125d5565b5050565b61233c8261246e565b61237b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123729061411b565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906123a29291906129b1565b505050565b60005b815181101561242b576123bd6009611cce565b8282815181106123d0576123cf61413b565b5b602002602001015110612418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240f906141dc565b60405180910390fd5b8080612423906141fc565b9150506123aa565b81600d60008581526020019081526020016000209080519060200190612452929190612a37565b50505050565b6000818361246691906137bd565b905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff1661249083611d36565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156125cf57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146125435780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461253b9190613665565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146125ce5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125c691906137bd565b925050819055505b5b50505050565b50505050565b60006125fc8473ffffffffffffffffffffffffffffffffffffffff1661283b565b15612756578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261262561187e565b8786866040518563ffffffff1660e01b8152600401612647949392919061429a565b6020604051808303816000875af192505050801561268357506040513d601f19601f8201168201806040525081019061268091906142fb565b60015b612706573d80600081146126b3576040519150601f19603f3d011682016040523d82523d6000602084013e6126b8565b606091505b506000815114156126fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f590613fb1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061275b565b600190505b949350505050565b6060600060016127728461285e565b01905060008167ffffffffffffffff81111561279157612790612f96565b5b6040519080825280601f01601f1916602001820160405280156127c35781602001600182028036833780820191505090505b509050600082602001820190505b600115612830578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161281a57612819613605565b5b049450600085141561282b57612830565b6127d1565b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106128bc577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816128b2576128b1613605565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106128f9576d04ee2d6d415b85acef810000000083816128ef576128ee613605565b5b0492506020810190505b662386f26fc10000831061292857662386f26fc10000838161291e5761291d613605565b5b0492506010810190505b6305f5e1008310612951576305f5e100838161294757612946613605565b5b0492506008810190505b612710831061297657612710838161296c5761296b613605565b5b0492506004810190505b60648310612999576064838161298f5761298e613605565b5b0492506002810190505b600a83106129a8576001810190505b80915050919050565b8280546129bd90613394565b90600052602060002090601f0160209004810192826129df5760008555612a26565b82601f106129f857805160ff1916838001178555612a26565b82800160010185558215612a26579182015b82811115612a25578251825591602001919060010190612a0a565b5b509050612a339190612a84565b5090565b828054828255906000526020600020908101928215612a73579160200282015b82811115612a72578251825591602001919060010190612a57565b5b509050612a809190612a84565b5090565b5b80821115612a9d576000816000905550600101612a85565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612aea81612ab5565b8114612af557600080fd5b50565b600081359050612b0781612ae1565b92915050565b600060208284031215612b2357612b22612aab565b5b6000612b3184828501612af8565b91505092915050565b60008115159050919050565b612b4f81612b3a565b82525050565b6000602082019050612b6a6000830184612b46565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612baa578082015181840152602081019050612b8f565b83811115612bb9576000848401525b50505050565b6000601f19601f8301169050919050565b6000612bdb82612b70565b612be58185612b7b565b9350612bf5818560208601612b8c565b612bfe81612bbf565b840191505092915050565b60006020820190508181036000830152612c238184612bd0565b905092915050565b6000819050919050565b612c3e81612c2b565b8114612c4957600080fd5b50565b600081359050612c5b81612c35565b92915050565b600060208284031215612c7757612c76612aab565b5b6000612c8584828501612c4c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612cb982612c8e565b9050919050565b612cc981612cae565b82525050565b6000602082019050612ce46000830184612cc0565b92915050565b612cf381612cae565b8114612cfe57600080fd5b50565b600081359050612d1081612cea565b92915050565b60008060408385031215612d2d57612d2c612aab565b5b6000612d3b85828601612d01565b9250506020612d4c85828601612c4c565b9150509250929050565b600080600060608486031215612d6f57612d6e612aab565b5b6000612d7d86828701612d01565b9350506020612d8e86828701612d01565b9250506040612d9f86828701612c4c565b9150509250925092565b60008060408385031215612dc057612dbf612aab565b5b6000612dce85828601612c4c565b9250506020612ddf85828601612c4c565b9150509250929050565b612df281612c2b565b82525050565b6000602082019050612e0d6000830184612de9565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612e4881612c2b565b82525050565b6000612e5a8383612e3f565b60208301905092915050565b6000602082019050919050565b6000612e7e82612e13565b612e888185612e1e565b9350612e9383612e2f565b8060005b83811015612ec4578151612eab8882612e4e565b9750612eb683612e66565b925050600181019050612e97565b5085935050505092915050565b60006020820190508181036000830152612eeb8184612e73565b905092915050565b600060208284031215612f0957612f08612aab565b5b6000612f1784828501612d01565b91505092915050565b612f2981612b3a565b8114612f3457600080fd5b50565b600081359050612f4681612f20565b92915050565b60008060408385031215612f6357612f62612aab565b5b6000612f7185828601612d01565b9250506020612f8285828601612f37565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612fce82612bbf565b810181811067ffffffffffffffff82111715612fed57612fec612f96565b5b80604052505050565b6000613000612aa1565b905061300c8282612fc5565b919050565b600067ffffffffffffffff82111561302c5761302b612f96565b5b61303582612bbf565b9050602081019050919050565b82818337600083830152505050565b600061306461305f84613011565b612ff6565b9050828152602081018484840111156130805761307f612f91565b5b61308b848285613042565b509392505050565b600082601f8301126130a8576130a7612f8c565b5b81356130b8848260208601613051565b91505092915050565b600080600080608085870312156130db576130da612aab565b5b60006130e987828801612d01565b94505060206130fa87828801612d01565b935050604061310b87828801612c4c565b925050606085013567ffffffffffffffff81111561312c5761312b612ab0565b5b61313887828801613093565b91505092959194509250565b6000806040838503121561315b5761315a612aab565b5b600061316985828601612d01565b925050602061317a85828601612d01565b9150509250929050565b600067ffffffffffffffff82111561319f5761319e612f96565b5b6131a882612bbf565b9050602081019050919050565b60006131c86131c384613184565b612ff6565b9050828152602081018484840111156131e4576131e3612f91565b5b6131ef848285613042565b509392505050565b600082601f83011261320c5761320b612f8c565b5b813561321c8482602086016131b5565b91505092915050565b600067ffffffffffffffff8211156132405761323f612f96565b5b602082029050602081019050919050565b600080fd5b600061326961326484613225565b612ff6565b9050808382526020820190506020840283018581111561328c5761328b613251565b5b835b818110156132b557806132a18882612c4c565b84526020840193505060208101905061328e565b5050509392505050565b600082601f8301126132d4576132d3612f8c565b5b81356132e4848260208601613256565b91505092915050565b6000806040838503121561330457613303612aab565b5b600083013567ffffffffffffffff81111561332257613321612ab0565b5b61332e858286016131f7565b925050602083013567ffffffffffffffff81111561334f5761334e612ab0565b5b61335b858286016132bf565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806133ac57607f821691505b602082108114156133c0576133bf613365565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613422602183612b7b565b915061342d826133c6565b604082019050919050565b6000602082019050818103600083015261345181613415565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006134b4603d83612b7b565b91506134bf82613458565b604082019050919050565b600060208201905081810360008301526134e3816134a7565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000613546602d83612b7b565b9150613551826134ea565b604082019050919050565b6000602082019050818103600083015261357581613539565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006135b682612c2b565b91506135c183612c2b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135fa576135f961357c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061363f82612c2b565b915061364a83612c2b565b92508261365a57613659613605565b5b828204905092915050565b600061367082612c2b565b915061367b83612c2b565b92508282101561368e5761368d61357c565b5b828203905092915050565b7f5f6765745265666572656e636573203a20656e74657220612076616c6964207460008201527f6f6b656e20496400000000000000000000000000000000000000000000000000602082015250565b60006136f5602783612b7b565b915061370082613699565b604082019050919050565b60006020820190508181036000830152613724816136e8565b9050919050565b7f546865726520617265206e6f2066756e647320746f20626520636c61696d656460008201527f20746f2074686973207265666572656e63650000000000000000000000000000602082015250565b6000613787603283612b7b565b91506137928261372b565b604082019050919050565b600060208201905081810360008301526137b68161377a565b9050919050565b60006137c882612c2b565b91506137d383612c2b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156138085761380761357c565b5b828201905092915050565b600081905092915050565b50565b600061382e600083613813565b91506138398261381e565b600082019050919050565b600061384f82613821565b9150819050919050565b7f5472616e73666572206f6620636c61696d657227732066756e6473206661696c60008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b60006138b5602283612b7b565b91506138c082613859565b604082019050919050565b600060208201905081810360008301526138e4816138a8565b9050919050565b7f6f6e6c79206f776e6572206f662074686520746f6b656e2063616e207365742060008201527f6120666f6c6c6f77206d65200000000000000000000000000000000000000000602082015250565b6000613947602c83612b7b565b9150613952826138eb565b604082019050919050565b600060208201905081810360008301526139768161393a565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006139b3601883612b7b565b91506139be8261397d565b602082019050919050565b600060208201905081810360008301526139e2816139a6565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613a45602983612b7b565b9150613a50826139e9565b604082019050919050565b60006020820190508181036000830152613a7481613a38565b9050919050565b7f546865726520617265206e6f2066756e647320746f20626520636c61696d656460008201527f20666f7220746865206f776e6572000000000000000000000000000000000000602082015250565b6000613ad7602e83612b7b565b9150613ae282613a7b565b604082019050919050565b60006020820190508181036000830152613b0681613aca565b9050919050565b7f5472616e73666572206f66206f776e657227732066756e6473206661696c6564600082015250565b6000613b43602083612b7b565b9150613b4e82613b0d565b602082019050919050565b60006020820190508181036000830152613b7281613b36565b9050919050565b600081905092915050565b6000613b8f82612b70565b613b998185613b79565b9350613ba9818560208601612b8c565b80840191505092915050565b6000613bc18285613b84565b9150613bcd8284613b84565b91508190509392505050565b7f546f6b656e20646f6573206e6f742065786973742e0000000000000000000000600082015250565b6000613c0f601583612b7b565b9150613c1a82613bd9565b602082019050919050565b60006020820190508181036000830152613c3e81613c02565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613ca1602683612b7b565b9150613cac82613c45565b604082019050919050565b60006020820190508181036000830152613cd081613c94565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613d33602583612b7b565b9150613d3e82613cd7565b604082019050919050565b60006020820190508181036000830152613d6281613d26565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613dc5602483612b7b565b9150613dd082613d69565b604082019050919050565b60006020820190508181036000830152613df481613db8565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613e31601f83612b7b565b9150613e3c82613dfb565b602082019050919050565b60006020820190508181036000830152613e6081613e24565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613e9d602083612b7b565b9150613ea882613e67565b602082019050919050565b60006020820190508181036000830152613ecc81613e90565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613f09601983612b7b565b9150613f1482613ed3565b602082019050919050565b60006020820190508181036000830152613f3881613efc565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613f9b603283612b7b565b9150613fa682613f3f565b604082019050919050565b60006020820190508181036000830152613fca81613f8e565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614007602083612b7b565b915061401282613fd1565b602082019050919050565b6000602082019050818103600083015261403681613ffa565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614073601c83612b7b565b915061407e8261403d565b602082019050919050565b600060208201905081810360008301526140a281614066565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000614105602e83612b7b565b9150614110826140a9565b604082019050919050565b60006020820190508181036000830152614134816140f8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5f6372656174655265666572656e6365733a20496e76616c696420746f6b656e60008201527f496420696e205265666572656e636520656e7472696573000000000000000000602082015250565b60006141c6603783612b7b565b91506141d18261416a565b604082019050919050565b600060208201905081810360008301526141f5816141b9565b9050919050565b600061420782612c2b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561423a5761423961357c565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b600061426c82614245565b6142768185614250565b9350614286818560208601612b8c565b61428f81612bbf565b840191505092915050565b60006080820190506142af6000830187612cc0565b6142bc6020830186612cc0565b6142c96040830185612de9565b81810360608301526142db8184614261565b905095945050505050565b6000815190506142f581612ae1565b92915050565b60006020828403121561431157614310612aab565b5b600061431f848285016142e6565b9150509291505056fea2646970667358221220e3f6e73e062bec31302050109e3bd347cf02bbe8a5dcda4d6159d6279deb41e464736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80638da5cb5b116100ec578063c87b56dd1161008a578063f14faf6f11610064578063f14faf6f1461060e578063f2fde38b1461062a578063f3a99c0814610653578063f9f16ef2146106905761019c565b8063c87b56dd14610557578063e985e9c514610594578063eaf684cf146105d15761019c565b80639d5f08f1116100c65780639d5f08f11461049f578063a22cb465146104dc578063af51694b14610505578063b88d4fde1461052e5761019c565b80638da5cb5b1461041e57806395d89b41146104495780639b5655dc146104745761019c565b80633cfc7ae2116101595780635e287945116101335780635e287945146103645780636352211e1461038d57806370a08231146103ca578063715018a6146104075761019c565b80633cfc7ae2146102d5578063413669f01461031257806342842e0e1461033b5761019c565b806301ffc9a7146101a157806306fdde03146101de578063081812fc14610209578063095ea7b31461024657806323b872dd1461026f5780632640fc3e14610298575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c39190612b0d565b6106bb565b6040516101d59190612b55565b60405180910390f35b3480156101ea57600080fd5b506101f361079d565b6040516102009190612c09565b60405180910390f35b34801561021557600080fd5b50610230600480360381019061022b9190612c61565b61082f565b60405161023d9190612ccf565b60405180910390f35b34801561025257600080fd5b5061026d60048036038101906102689190612d16565b610875565b005b34801561027b57600080fd5b5061029660048036038101906102919190612d56565b61098d565b005b3480156102a457600080fd5b506102bf60048036038101906102ba9190612da9565b6109ed565b6040516102cc9190612df8565b60405180910390f35b3480156102e157600080fd5b506102fc60048036038101906102f79190612c61565b610b11565b6040516103099190612ed1565b60405180910390f35b34801561031e57600080fd5b5061033960048036038101906103349190612da9565b610bd4565b005b34801561034757600080fd5b50610362600480360381019061035d9190612d56565b610dcc565b005b34801561037057600080fd5b5061038b60048036038101906103869190612da9565b610dec565b005b34801561039957600080fd5b506103b460048036038101906103af9190612c61565b610e7e565b6040516103c19190612ccf565b60405180910390f35b3480156103d657600080fd5b506103f160048036038101906103ec9190612ef3565b610f05565b6040516103fe9190612df8565b60405180910390f35b34801561041357600080fd5b5061041c610fbd565b005b34801561042a57600080fd5b50610433610fd1565b6040516104409190612ccf565b60405180910390f35b34801561045557600080fd5b5061045e610ffb565b60405161046b9190612c09565b60405180910390f35b34801561048057600080fd5b5061048961108d565b6040516104969190612df8565b60405180910390f35b3480156104ab57600080fd5b506104c660048036038101906104c19190612c61565b611097565b6040516104d39190612df8565b60405180910390f35b3480156104e857600080fd5b5061050360048036038101906104fe9190612f4c565b6110d2565b005b34801561051157600080fd5b5061052c60048036038101906105279190612c61565b6110e8565b005b34801561053a57600080fd5b50610555600480360381019061055091906130c1565b611370565b005b34801561056357600080fd5b5061057e60048036038101906105799190612c61565b6113d2565b60405161058b9190612c09565b60405180910390f35b3480156105a057600080fd5b506105bb60048036038101906105b69190613144565b6114e5565b6040516105c89190612b55565b60405180910390f35b3480156105dd57600080fd5b506105f860048036038101906105f391906132ed565b611579565b6040516106059190612df8565b60405180910390f35b61062860048036038101906106239190612c61565b6115ba565b005b34801561063657600080fd5b50610651600480360381019061064c9190612ef3565b611717565b005b34801561065f57600080fd5b5061067a60048036038101906106759190612c61565b61179b565b6040516106879190612df8565b60405180910390f35b34801561069c57600080fd5b506106a56117b8565b6040516106b29190612df8565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061078657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107965750610795826117c9565b5b9050919050565b6060600080546107ac90613394565b80601f01602080910402602001604051908101604052809291908181526020018280546107d890613394565b80156108255780601f106107fa57610100808354040283529160200191610825565b820191906000526020600020905b81548152906001019060200180831161080857829003601f168201915b5050505050905090565b600061083a82611833565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061088082610e7e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e890613438565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661091061187e565b73ffffffffffffffffffffffffffffffffffffffff16148061093f575061093e8161093961187e565b6114e5565b5b61097e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610975906134ca565b60405180910390fd5b6109888383611886565b505050565b61099e61099861187e565b8261193f565b6109dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d49061355c565b60405180910390fd5b6109e88383836119d4565b505050565b600080600d6000848152602001908152602001600020805490501115610aee5781831415610a7757600c600084815260200190815260200160002060008481526020019081526020016000205460036002600a600087815260200190815260200160002054610a5c91906135ab565b610a669190613634565b610a709190613665565b9050610b0b565b600c6000848152602001908152602001600020600083815260200190815260200160002054600d6000848152602001908152602001600020805490506003600a600086815260200190815260200160002054610ad39190613634565b610add9190613634565b610ae79190613665565b9050610b0b565b81831415610b0657610aff82611097565b9050610b0b565b600090505b92915050565b606060008210158015610b2c5750610b296009611cce565b82105b610b6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b629061370b565b60405180910390fd5b600d6000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610bc857602002820191906000526020600020905b815481526020019060010190808311610bb4575b50505050509050919050565b610bdc611cdc565b6000610be883836109ed565b905060008111610c2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c249061379d565b60405180910390fd5b6000606482610c3c9190613634565b905082847fa7116c38c2fc13dbd2d57ce586bb24784466a4b1f54b8f2676b220044a26f55d84604051610c6f9190612df8565b60405180910390a381600b60008581526020019081526020016000206000828254610c9a91906137bd565b9250508190555081600c600086815260200190815260200160002060008581526020019081526020016000206000828254610cd591906137bd565b925050819055508082610ce89190613665565b600a60008681526020019081526020016000206000828254610d0a91906137bd565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610d3790613844565b60006040518083038185875af1925050503d8060008114610d74576040519150601f19603f3d011682016040523d82523d6000602084013e610d79565b606091505b5050905080610dbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db4906138cb565b60405180910390fd5b505050610dc8611d2c565b5050565b610de783838360405180602001604052806000815250611370565b505050565b610df582611d36565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e599061395d565b60405180910390fd5b80600e6000848152602001908152602001600020819055505050565b600080610e8a83611d36565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef3906139c9565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6d90613a5b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610fc5611d73565b610fcf6000611df1565b565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461100a90613394565b80601f016020809104026020016040519081016040528092919081815260200182805461103690613394565b80156110835780601f1061105857610100808354040283529160200191611083565b820191906000526020600020905b81548152906001019060200180831161106657829003601f168201915b5050505050905090565b6000600f54905090565b6000600b600083815260200190815260200160002054600a6000848152602001908152602001600020546110cb9190613665565b9050919050565b6110e46110dd61187e565b8383611eb7565b5050565b6110f0611cdc565b60006110fc82836109ed565b905060008111611141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113890613aed565b60405180910390fd5b60006064826111509190613634565b905082837fa7116c38c2fc13dbd2d57ce586bb24784466a4b1f54b8f2676b220044a26f55d846040516111839190612df8565b60405180910390a381600b600085815260200190815260200160002060008282546111ae91906137bd565b9250508190555081600c6000858152602001908152602001600020600085815260200190815260200160002060008282546111e991906137bd565b9250508190555060006111fb84610e7e565b905060008173ffffffffffffffffffffffffffffffffffffffff1683856112229190613665565b60405161122e90613844565b60006040518083038185875af1925050503d806000811461126b576040519150601f19603f3d011682016040523d82523d6000602084013e611270565b606091505b50509050806112b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ab90613b59565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16846040516112da90613844565b60006040518083038185875af1925050503d8060008114611317576040519150601f19603f3d011682016040523d82523d6000602084013e61131c565b606091505b5050905080611360576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611357906138cb565b60405180910390fd5b505050505061136d611d2c565b50565b61138161137b61187e565b8361193f565b6113c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b79061355c565b60405180910390fd5b6113cc84848484612024565b50505050565b60606113dd82611833565b60006006600084815260200190815260200160002080546113fd90613394565b80601f016020809104026020016040519081016040528092919081815260200182805461142990613394565b80156114765780601f1061144b57610100808354040283529160200191611476565b820191906000526020600020905b81548152906001019060200180831161145957829003601f168201915b505050505090506000611487612080565b905060008151141561149d5781925050506114e0565b6000825111156114d25780826040516020016114ba929190613bb5565b604051602081830303815290604052925050506114e0565b6114db84612097565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806115866009611cce565b905061159260096120ff565b61159c3382612115565b6115a68185612333565b6115b081846123a7565b8091505092915050565b6115c2611cdc565b6115cc6009611cce565b811061160d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160490613c25565b60405180910390fd5b600060643461161c9190613634565b90506000600e6000848152602001908152602001600020541461165057600e60008381526020019081526020016000205491505b611681813461165f9190613665565b600a60008581526020019081526020016000205461245890919063ffffffff16565b600a600084815260200190815260200160002081905550813373ffffffffffffffffffffffffffffffffffffffff167f106aac375bbcf013d1e52338bbf9e740009a1a3a6869f8daa1b72aa1620f5fec83346116dd9190613665565b6040516116ea9190612df8565b60405180910390a380600f600082825461170491906137bd565b9250508190555050611714611d2c565b50565b61171f611d73565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561178f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178690613cb7565b60405180910390fd5b61179881611df1565b50565b6000600a6000838152602001908152602001600020549050919050565b60006117c46009611cce565b905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61183c8161246e565b61187b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611872906139c9565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166118f983610e7e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061194b83610e7e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061198d575061198c81856114e5565b5b806119cb57508373ffffffffffffffffffffffffffffffffffffffff166119b38461082f565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166119f482610e7e565b73ffffffffffffffffffffffffffffffffffffffff1614611a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4190613d49565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab190613ddb565b60405180910390fd5b611ac783838360016124af565b8273ffffffffffffffffffffffffffffffffffffffff16611ae782610e7e565b73ffffffffffffffffffffffffffffffffffffffff1614611b3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3490613d49565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611cc983838360016125d5565b505050565b600081600001549050919050565b60026007541415611d22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1990613e47565b60405180910390fd5b6002600781905550565b6001600781905550565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611d7b61187e565b73ffffffffffffffffffffffffffffffffffffffff16611d99610fd1565b73ffffffffffffffffffffffffffffffffffffffff1614611def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de690613eb3565b60405180910390fd5b565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1d90613f1f565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516120179190612b55565b60405180910390a3505050565b61202f8484846119d4565b61203b848484846125db565b61207a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207190613fb1565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606120a282611833565b60006120ac612080565b905060008151116120cc57604051806020016040528060008152506120f7565b806120d684612763565b6040516020016120e7929190613bb5565b6040516020818303038152906040525b915050919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217c9061401d565b60405180910390fd5b61218e8161246e565b156121ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c590614089565b60405180910390fd5b6121dc6000838360016124af565b6121e58161246e565b15612225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221c90614089565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461232f6000838360016125d5565b5050565b61233c8261246e565b61237b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123729061411b565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906123a29291906129b1565b505050565b60005b815181101561242b576123bd6009611cce565b8282815181106123d0576123cf61413b565b5b602002602001015110612418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240f906141dc565b60405180910390fd5b8080612423906141fc565b9150506123aa565b81600d60008581526020019081526020016000209080519060200190612452929190612a37565b50505050565b6000818361246691906137bd565b905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff1661249083611d36565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156125cf57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146125435780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461253b9190613665565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146125ce5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125c691906137bd565b925050819055505b5b50505050565b50505050565b60006125fc8473ffffffffffffffffffffffffffffffffffffffff1661283b565b15612756578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261262561187e565b8786866040518563ffffffff1660e01b8152600401612647949392919061429a565b6020604051808303816000875af192505050801561268357506040513d601f19601f8201168201806040525081019061268091906142fb565b60015b612706573d80600081146126b3576040519150601f19603f3d011682016040523d82523d6000602084013e6126b8565b606091505b506000815114156126fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f590613fb1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061275b565b600190505b949350505050565b6060600060016127728461285e565b01905060008167ffffffffffffffff81111561279157612790612f96565b5b6040519080825280601f01601f1916602001820160405280156127c35781602001600182028036833780820191505090505b509050600082602001820190505b600115612830578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161281a57612819613605565b5b049450600085141561282b57612830565b6127d1565b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106128bc577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816128b2576128b1613605565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106128f9576d04ee2d6d415b85acef810000000083816128ef576128ee613605565b5b0492506020810190505b662386f26fc10000831061292857662386f26fc10000838161291e5761291d613605565b5b0492506010810190505b6305f5e1008310612951576305f5e100838161294757612946613605565b5b0492506008810190505b612710831061297657612710838161296c5761296b613605565b5b0492506004810190505b60648310612999576064838161298f5761298e613605565b5b0492506002810190505b600a83106129a8576001810190505b80915050919050565b8280546129bd90613394565b90600052602060002090601f0160209004810192826129df5760008555612a26565b82601f106129f857805160ff1916838001178555612a26565b82800160010185558215612a26579182015b82811115612a25578251825591602001919060010190612a0a565b5b509050612a339190612a84565b5090565b828054828255906000526020600020908101928215612a73579160200282015b82811115612a72578251825591602001919060010190612a57565b5b509050612a809190612a84565b5090565b5b80821115612a9d576000816000905550600101612a85565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612aea81612ab5565b8114612af557600080fd5b50565b600081359050612b0781612ae1565b92915050565b600060208284031215612b2357612b22612aab565b5b6000612b3184828501612af8565b91505092915050565b60008115159050919050565b612b4f81612b3a565b82525050565b6000602082019050612b6a6000830184612b46565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612baa578082015181840152602081019050612b8f565b83811115612bb9576000848401525b50505050565b6000601f19601f8301169050919050565b6000612bdb82612b70565b612be58185612b7b565b9350612bf5818560208601612b8c565b612bfe81612bbf565b840191505092915050565b60006020820190508181036000830152612c238184612bd0565b905092915050565b6000819050919050565b612c3e81612c2b565b8114612c4957600080fd5b50565b600081359050612c5b81612c35565b92915050565b600060208284031215612c7757612c76612aab565b5b6000612c8584828501612c4c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612cb982612c8e565b9050919050565b612cc981612cae565b82525050565b6000602082019050612ce46000830184612cc0565b92915050565b612cf381612cae565b8114612cfe57600080fd5b50565b600081359050612d1081612cea565b92915050565b60008060408385031215612d2d57612d2c612aab565b5b6000612d3b85828601612d01565b9250506020612d4c85828601612c4c565b9150509250929050565b600080600060608486031215612d6f57612d6e612aab565b5b6000612d7d86828701612d01565b9350506020612d8e86828701612d01565b9250506040612d9f86828701612c4c565b9150509250925092565b60008060408385031215612dc057612dbf612aab565b5b6000612dce85828601612c4c565b9250506020612ddf85828601612c4c565b9150509250929050565b612df281612c2b565b82525050565b6000602082019050612e0d6000830184612de9565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612e4881612c2b565b82525050565b6000612e5a8383612e3f565b60208301905092915050565b6000602082019050919050565b6000612e7e82612e13565b612e888185612e1e565b9350612e9383612e2f565b8060005b83811015612ec4578151612eab8882612e4e565b9750612eb683612e66565b925050600181019050612e97565b5085935050505092915050565b60006020820190508181036000830152612eeb8184612e73565b905092915050565b600060208284031215612f0957612f08612aab565b5b6000612f1784828501612d01565b91505092915050565b612f2981612b3a565b8114612f3457600080fd5b50565b600081359050612f4681612f20565b92915050565b60008060408385031215612f6357612f62612aab565b5b6000612f7185828601612d01565b9250506020612f8285828601612f37565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612fce82612bbf565b810181811067ffffffffffffffff82111715612fed57612fec612f96565b5b80604052505050565b6000613000612aa1565b905061300c8282612fc5565b919050565b600067ffffffffffffffff82111561302c5761302b612f96565b5b61303582612bbf565b9050602081019050919050565b82818337600083830152505050565b600061306461305f84613011565b612ff6565b9050828152602081018484840111156130805761307f612f91565b5b61308b848285613042565b509392505050565b600082601f8301126130a8576130a7612f8c565b5b81356130b8848260208601613051565b91505092915050565b600080600080608085870312156130db576130da612aab565b5b60006130e987828801612d01565b94505060206130fa87828801612d01565b935050604061310b87828801612c4c565b925050606085013567ffffffffffffffff81111561312c5761312b612ab0565b5b61313887828801613093565b91505092959194509250565b6000806040838503121561315b5761315a612aab565b5b600061316985828601612d01565b925050602061317a85828601612d01565b9150509250929050565b600067ffffffffffffffff82111561319f5761319e612f96565b5b6131a882612bbf565b9050602081019050919050565b60006131c86131c384613184565b612ff6565b9050828152602081018484840111156131e4576131e3612f91565b5b6131ef848285613042565b509392505050565b600082601f83011261320c5761320b612f8c565b5b813561321c8482602086016131b5565b91505092915050565b600067ffffffffffffffff8211156132405761323f612f96565b5b602082029050602081019050919050565b600080fd5b600061326961326484613225565b612ff6565b9050808382526020820190506020840283018581111561328c5761328b613251565b5b835b818110156132b557806132a18882612c4c565b84526020840193505060208101905061328e565b5050509392505050565b600082601f8301126132d4576132d3612f8c565b5b81356132e4848260208601613256565b91505092915050565b6000806040838503121561330457613303612aab565b5b600083013567ffffffffffffffff81111561332257613321612ab0565b5b61332e858286016131f7565b925050602083013567ffffffffffffffff81111561334f5761334e612ab0565b5b61335b858286016132bf565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806133ac57607f821691505b602082108114156133c0576133bf613365565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613422602183612b7b565b915061342d826133c6565b604082019050919050565b6000602082019050818103600083015261345181613415565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006134b4603d83612b7b565b91506134bf82613458565b604082019050919050565b600060208201905081810360008301526134e3816134a7565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000613546602d83612b7b565b9150613551826134ea565b604082019050919050565b6000602082019050818103600083015261357581613539565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006135b682612c2b565b91506135c183612c2b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135fa576135f961357c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061363f82612c2b565b915061364a83612c2b565b92508261365a57613659613605565b5b828204905092915050565b600061367082612c2b565b915061367b83612c2b565b92508282101561368e5761368d61357c565b5b828203905092915050565b7f5f6765745265666572656e636573203a20656e74657220612076616c6964207460008201527f6f6b656e20496400000000000000000000000000000000000000000000000000602082015250565b60006136f5602783612b7b565b915061370082613699565b604082019050919050565b60006020820190508181036000830152613724816136e8565b9050919050565b7f546865726520617265206e6f2066756e647320746f20626520636c61696d656460008201527f20746f2074686973207265666572656e63650000000000000000000000000000602082015250565b6000613787603283612b7b565b91506137928261372b565b604082019050919050565b600060208201905081810360008301526137b68161377a565b9050919050565b60006137c882612c2b565b91506137d383612c2b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156138085761380761357c565b5b828201905092915050565b600081905092915050565b50565b600061382e600083613813565b91506138398261381e565b600082019050919050565b600061384f82613821565b9150819050919050565b7f5472616e73666572206f6620636c61696d657227732066756e6473206661696c60008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b60006138b5602283612b7b565b91506138c082613859565b604082019050919050565b600060208201905081810360008301526138e4816138a8565b9050919050565b7f6f6e6c79206f776e6572206f662074686520746f6b656e2063616e207365742060008201527f6120666f6c6c6f77206d65200000000000000000000000000000000000000000602082015250565b6000613947602c83612b7b565b9150613952826138eb565b604082019050919050565b600060208201905081810360008301526139768161393a565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006139b3601883612b7b565b91506139be8261397d565b602082019050919050565b600060208201905081810360008301526139e2816139a6565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613a45602983612b7b565b9150613a50826139e9565b604082019050919050565b60006020820190508181036000830152613a7481613a38565b9050919050565b7f546865726520617265206e6f2066756e647320746f20626520636c61696d656460008201527f20666f7220746865206f776e6572000000000000000000000000000000000000602082015250565b6000613ad7602e83612b7b565b9150613ae282613a7b565b604082019050919050565b60006020820190508181036000830152613b0681613aca565b9050919050565b7f5472616e73666572206f66206f776e657227732066756e6473206661696c6564600082015250565b6000613b43602083612b7b565b9150613b4e82613b0d565b602082019050919050565b60006020820190508181036000830152613b7281613b36565b9050919050565b600081905092915050565b6000613b8f82612b70565b613b998185613b79565b9350613ba9818560208601612b8c565b80840191505092915050565b6000613bc18285613b84565b9150613bcd8284613b84565b91508190509392505050565b7f546f6b656e20646f6573206e6f742065786973742e0000000000000000000000600082015250565b6000613c0f601583612b7b565b9150613c1a82613bd9565b602082019050919050565b60006020820190508181036000830152613c3e81613c02565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613ca1602683612b7b565b9150613cac82613c45565b604082019050919050565b60006020820190508181036000830152613cd081613c94565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613d33602583612b7b565b9150613d3e82613cd7565b604082019050919050565b60006020820190508181036000830152613d6281613d26565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613dc5602483612b7b565b9150613dd082613d69565b604082019050919050565b60006020820190508181036000830152613df481613db8565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613e31601f83612b7b565b9150613e3c82613dfb565b602082019050919050565b60006020820190508181036000830152613e6081613e24565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613e9d602083612b7b565b9150613ea882613e67565b602082019050919050565b60006020820190508181036000830152613ecc81613e90565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613f09601983612b7b565b9150613f1482613ed3565b602082019050919050565b60006020820190508181036000830152613f3881613efc565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613f9b603283612b7b565b9150613fa682613f3f565b604082019050919050565b60006020820190508181036000830152613fca81613f8e565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614007602083612b7b565b915061401282613fd1565b602082019050919050565b6000602082019050818103600083015261403681613ffa565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614073601c83612b7b565b915061407e8261403d565b602082019050919050565b600060208201905081810360008301526140a281614066565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000614105602e83612b7b565b9150614110826140a9565b604082019050919050565b60006020820190508181036000830152614134816140f8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5f6372656174655265666572656e6365733a20496e76616c696420746f6b656e60008201527f496420696e205265666572656e636520656e7472696573000000000000000000602082015250565b60006141c6603783612b7b565b91506141d18261416a565b604082019050919050565b600060208201905081810360008301526141f5816141b9565b9050919050565b600061420782612c2b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561423a5761423961357c565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b600061426c82614245565b6142768185614250565b9350614286818560208601612b8c565b61428f81612bbf565b840191505092915050565b60006080820190506142af6000830187612cc0565b6142bc6020830186612cc0565b6142c96040830185612de9565b81810360608301526142db8184614261565b905095945050505050565b6000815190506142f581612ae1565b92915050565b60006020828403121561431157614310612aab565b5b600061431f848285016142e6565b9150509291505056fea2646970667358221220e3f6e73e062bec31302050109e3bd347cf02bbe8a5dcda4d6159d6279deb41e464736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "claimToOwner(uint256)": {
        "details": "sender pulls a fee _ and sends claimable value to address of the owner of _tokenId_: callable by any address",
        "params": {
          "tokenId": "id of the token having its donation pulled "
        }
      },
      "claimToRef(uint256,uint256)": {
        "details": "sender pulls a fee _ and sends claimable part of the donation balance to a reference NFT: callable by any address",
        "params": {
          "from": "id of the NFT having its donation balance claimed",
          "to": "id of the reference NFT receiving the donation balance"
        }
      },
      "claimable(uint256,uint256)": {
        "details": "owner of the token that received the donation has a claim to 2/3_ _references split the remaining 1/3",
        "params": {
          "from": "tokenId that received the donation",
          "to": "tokenId that has a claim over part of the donation received by _from_"
        },
        "returns": {
          "_0": "_ value that _to_ can receive for that particular token (_from_)"
        }
      },
      "donate(uint256)": {
        "details": "receives payment as donation updated _totalDonated[tokenId] if there is a _followMe set for _tokenId_ uses this entry as tokenId "
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setFollowMe(uint256,uint256)": {
        "details": "updates followMe mapping ",
        "params": {
          "from": "the id of the old NFT",
          "to": "the id of the new updated NFT "
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_balanceClaimed": {
        "details": "total value ever claimed to _tokenTo_ from _tokenFrom_'s donations maps _(beneficiary, claimee)_ to _value_ _beneficiary_ is the token claiming part of the donation _claimee_ is the token that received the donation and is having its balance claimed"
      },
      "_followMe": {
        "details": "donations to _from_ are automatically sent to _to_ this mapping allows new tokens to be minted with updated references donations sent to old token are still received by the new one with the right split"
      },
      "_references": {
        "details": "list of references created for _tokenId_ list cannot be updated if references must be changed new token should be minted maps _tokenId_ to _reference list_"
      },
      "_totalClaimed": {
        "details": "total value ever claimed from _tokenId_'s donations maps _tokenId_ to _value_"
      },
      "_totalDonated": {
        "details": "total value ever donated to tokenId maps _tokenId_ to _value_"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimable(uint256,uint256)": {
        "notice": "gets the value that can be claimed for a pair (to, from)"
      },
      "setFollowMe(uint256,uint256)": {
        "notice": "should be used when a onwer wants to update _ the reference list, in which case a new NFT should be minted _ followMe guarantees that any donation sent to the old NFT will be _ sent to the new one and split between the new list of references"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 192,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 194,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 198,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 202,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 206,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 212,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1258,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 123,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3234,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)1755_storage"
      },
      {
        "astId": 3239,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_totalDonated",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3244,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_totalClaimed",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3251,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_balanceClaimed",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3257,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_references",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3262,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_followMe",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3264,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_treasuryBalance",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1755_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1754,
            "contract": "contracts/NFT.sol:NFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}